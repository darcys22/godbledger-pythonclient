# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import transaction_pb2 as transaction__pb2


class TransactorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTransaction = channel.unary_unary(
                '/transaction.Transactor/AddTransaction',
                request_serializer=transaction__pb2.TransactionRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.DeleteTransaction = channel.unary_unary(
                '/transaction.Transactor/DeleteTransaction',
                request_serializer=transaction__pb2.DeleteRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.VoidTransaction = channel.unary_unary(
                '/transaction.Transactor/VoidTransaction',
                request_serializer=transaction__pb2.DeleteRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.NodeVersion = channel.unary_unary(
                '/transaction.Transactor/NodeVersion',
                request_serializer=transaction__pb2.VersionRequest.SerializeToString,
                response_deserializer=transaction__pb2.VersionResponse.FromString,
                )
        self.AddTag = channel.unary_unary(
                '/transaction.Transactor/AddTag',
                request_serializer=transaction__pb2.AccountTagRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/transaction.Transactor/DeleteTag',
                request_serializer=transaction__pb2.DeleteAccountTagRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.AddCurrency = channel.unary_unary(
                '/transaction.Transactor/AddCurrency',
                request_serializer=transaction__pb2.CurrencyRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.DeleteCurrency = channel.unary_unary(
                '/transaction.Transactor/DeleteCurrency',
                request_serializer=transaction__pb2.DeleteCurrencyRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.GetTB = channel.unary_unary(
                '/transaction.Transactor/GetTB',
                request_serializer=transaction__pb2.TBRequest.SerializeToString,
                response_deserializer=transaction__pb2.TBResponse.FromString,
                )
        self.GetListing = channel.unary_unary(
                '/transaction.Transactor/GetListing',
                request_serializer=transaction__pb2.ReportRequest.SerializeToString,
                response_deserializer=transaction__pb2.ListingResponse.FromString,
                )
        self.AddAccount = channel.unary_unary(
                '/transaction.Transactor/AddAccount',
                request_serializer=transaction__pb2.AccountTagRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/transaction.Transactor/DeleteAccount',
                request_serializer=transaction__pb2.DeleteAccountTagRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )
        self.ReconcileTransactions = channel.unary_unary(
                '/transaction.Transactor/ReconcileTransactions',
                request_serializer=transaction__pb2.ReconciliationRequest.SerializeToString,
                response_deserializer=transaction__pb2.TransactionResponse.FromString,
                )


class TransactorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoidTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetListing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReconcileTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransaction,
                    request_deserializer=transaction__pb2.TransactionRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTransaction,
                    request_deserializer=transaction__pb2.DeleteRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'VoidTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.VoidTransaction,
                    request_deserializer=transaction__pb2.DeleteRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'NodeVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeVersion,
                    request_deserializer=transaction__pb2.VersionRequest.FromString,
                    response_serializer=transaction__pb2.VersionResponse.SerializeToString,
            ),
            'AddTag': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTag,
                    request_deserializer=transaction__pb2.AccountTagRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=transaction__pb2.DeleteAccountTagRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'AddCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCurrency,
                    request_deserializer=transaction__pb2.CurrencyRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCurrency,
                    request_deserializer=transaction__pb2.DeleteCurrencyRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'GetTB': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTB,
                    request_deserializer=transaction__pb2.TBRequest.FromString,
                    response_serializer=transaction__pb2.TBResponse.SerializeToString,
            ),
            'GetListing': grpc.unary_unary_rpc_method_handler(
                    servicer.GetListing,
                    request_deserializer=transaction__pb2.ReportRequest.FromString,
                    response_serializer=transaction__pb2.ListingResponse.SerializeToString,
            ),
            'AddAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAccount,
                    request_deserializer=transaction__pb2.AccountTagRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=transaction__pb2.DeleteAccountTagRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
            'ReconcileTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.ReconcileTransactions,
                    request_deserializer=transaction__pb2.ReconciliationRequest.FromString,
                    response_serializer=transaction__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transaction.Transactor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Transactor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/AddTransaction',
            transaction__pb2.TransactionRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/DeleteTransaction',
            transaction__pb2.DeleteRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoidTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/VoidTransaction',
            transaction__pb2.DeleteRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/NodeVersion',
            transaction__pb2.VersionRequest.SerializeToString,
            transaction__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/AddTag',
            transaction__pb2.AccountTagRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/DeleteTag',
            transaction__pb2.DeleteAccountTagRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/AddCurrency',
            transaction__pb2.CurrencyRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/DeleteCurrency',
            transaction__pb2.DeleteCurrencyRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/GetTB',
            transaction__pb2.TBRequest.SerializeToString,
            transaction__pb2.TBResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetListing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/GetListing',
            transaction__pb2.ReportRequest.SerializeToString,
            transaction__pb2.ListingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/AddAccount',
            transaction__pb2.AccountTagRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/DeleteAccount',
            transaction__pb2.DeleteAccountTagRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReconcileTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transaction.Transactor/ReconcileTransactions',
            transaction__pb2.ReconciliationRequest.SerializeToString,
            transaction__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
